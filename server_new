#!/usr/bin/env python
#encoding=utf-8

from mysql_con import db_hander
from enc_and_dec import enc_tools
from cloud import auth#, vdisk

import SocketServer
import sys
reload(sys)
sys.setdefaultencoding("utf-8")

class MyTcpServer(SocketServer.BaseRequestHandler):

    def handle(self):
        self.session = False
        self.appkey = '1604604621'
        self.appsecret = '1a7c4bb00f725ff815505bf87cdc980d'
        self.redirect_uri = 'http://127.0.0.1:5555'
        self.display = 'popup'
        self.user_token = ''

        print "[+] Get connection from: ", self.client_address
        while True:
            try:
                action = self.request.recv(4096)
                print "[+] Get action: ", action
                if action == "exit":
                    print "[+] Break the connection!"
                    break
                action_list = ["register", "login", "upload", "download", "share"]
                if action in action_list:
                    if action == "register":
                        self.register()
                    if action == "login":
                        self.login()
                    if action == "help":
                        continue
                    if action == "show":
                        self.show()
                    if action == "upload":
                        self.upload()
                    if action == "download":
                        self.download()
               # if not self.session:
               #     self.request.send("[*] Plese login or register frist")
               #    continue
            except Exception, e:
                print "[+]Get Error: " ,e  
    
    def register(self):
        self.request.send("[*] Welcome to register\n[*] Your username:")
        username = self.request.recv(4096)
        self.request.send("[*] Your password:")
        password = self.request.recv(4096)
        self.request.send("[*] Your confirm:")
        confirm = self.request.recv(4069)
        
        user_existed_sql = "SELECT * FROM login WHERE username="+repr(username)
        user_existed_result = db_hander.exec_query(user_existed_sql)
        if len(user_existed_result) > 0:
            self.request.send("[!] Username already existed\n[!] Please try again")
        elif password != confirm:
            self.request.send("[!] The password is different with confirm\n[!] Please try again")
        else:
            user_key = enc_tools.get_sha256(password)
            register_sql = "INSERT INTO login (username, user_key) VALUES ("+repr(username)+', '+repr(user_key)+')'
            db_hander.exec_query(register_sql)
            self.request.send("[!] Register successfully\n")

    def login(self):
        self.request.send("[*] Welcom to login\n[*] Your username:")
        username = self.request.recv(4096)
        self.request.send("[*] Your password:")
        password = self.request.recv(4096)

        user_key = enc_tools.get_sha256(password)
        login_verify_sql = "SELECT * FROM login where username="+repr(username)+" and user_key="+repr(user_key)
        login_result_sql = db_hander.exec_query(login_verify_sql)
        if len(login_result_sql) > 0:
            self.session = username
            self.request.send("[*] Login successfully")
        else:
            self.request.send("[!] Username or password is wrong")

    def show(self):
        if self.session == False:
            self.request.send("[!] Please login frist")
            return 0
        else:
            show_file_sql = "select filename from uploads where username="+repr(self.session)
            show_file_sql_result = db_hander.exec_query(show_file_sql)
            user_uploaded_file = ''.join([x for x in show_file_sql_result])
            self.request.send(user_uploaded_file)

    def upload(self):
        if self.session == False:
            self.request.send("[!] Please login frist")
            return 0
        else:
            self.request.send("[*] Welcome to upload")
        user_auth = auth.Token(self.appkey, self.appsecret, self.redirect_uri, self.display)
        print type(user_auth)
        if not self.user_token:
            self.user_token = user_auth.getAccessToken()
        self.request.send(self.user_token)
        upl_or_sha = self.request.recv(4096)
        file_name = self.request.recv(4096)
        file_hash = self.request.recv(4096)
        user_key_sql = "select user_key from login where username="+repr(self.session)
        user_key_sql_result = db_hander.exec_query(user_key_sql)
        print user_key_sql_result
        user_key = user_key_sql_result[0][0]
        self.request.send(user_key)
        user_upload_or_not = self.request.recv(4096)
        if "successfully" in user_upload_or_not:
            if upl_or_sha == "share":
                filehash = enc_tools.sha256_xor(user_key, file_hash)
                user_uploaded_sql = "insert into uploads (username, filename, filehash) values ('share', "+repr(filename)+", "+repr(filehash)+")"
            if upl_or_sha == "upload":           
                user_uploaded_sql = "insert into uploads (username, filename, filehash) values ("+repr(self.session)+", "+repr(file_name)+", "+repr(file_hash)+")"
                db_hander.exec_query(user_uploaded_sql)
            print "[+] Upload successfully"

    def download(self):
        if self.session == False:
            self.request.send("[!] Plese lpgin first")
            return 0
        else:
            self.request.send("[*] Welcome to upload")
            file_to_download_sql = "select filename from uploads where username="+repr(self.session)
            file_to_download_sql_result = db_hander.exec_query(file_to_download_sql)
            file_to_download = ''
            for i in xrange(len(file_to_download_sql_result)):
                file_to_download += file_to_download_sql_result[i][0] + "\n"
            self.request.send(file_to_download)
            flie_choosed = self.request.recv(4096)
            file_hash_sql = "select filehash from uploads where filename="+repr(flie_choosed)
            file_hash_sql_result = db_hander.exec_query(file_hash_sql)
            self.request.send(file_hash_sql_result[0][0])
            user_auth = auth.Token(self.appkey, self.appsecret, self.redirect_uri, self.display)
            if not self.user_token:
                self.user_token = user_auth.getAccessToken()
            self.request.send(self.user_token)            
            
if __name__ == '__main__':
    host = 'localhost'
    port = 5555
    try:
        s = SocketServer.ThreadingTCPServer((host,port), MyTcpServer)
        s.serve_forever()
    except:
        print "[!] Errors to exit"
        sys.exit(0)
